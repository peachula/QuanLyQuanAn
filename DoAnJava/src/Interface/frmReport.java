/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Process.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kieef
 */


public class frmReport extends javax.swing.JFrame {

    private final Receipt  main_order = new Receipt();
    private final ReceiptDetail main_detail = new ReceiptDetail();
    private final Category main_cate = new Category();
    private final Dish main_dish = new Dish();
    
    
    private long total;
    private String order_id = "";
    private int customerID;
    
    private int cateID = 0;
    
    private final DefaultTableModel tableModel = new DefaultTableModel();
    private final DefaultTableModel tableModelDish = new DefaultTableModel();
    private final DefaultTableModel tableModelCate = new DefaultTableModel();
    private final DefaultTableModel tableModelDetail = new DefaultTableModel();
    /**
     * Creates new form frmOrder
     */
    public frmReport() throws SQLException {
        initComponents();
        setSize(794,612);
        setLocationRelativeTo(null);
        
        
        ///setting for tbOrderID
        String []colsName_OrderID = {"ORDER NUM"};
        // đặt tiêu đề cột cho tableModel
        tableModel.setColumnIdentifiers(colsName_OrderID);
        tbOrderID.setModel(tableModel);
        //gọi hàm ShowData để đưa dữ liệu vào tableModel
        ShowUncompleteOrderData();
        
        ///setting for tbCate
        String []colsName_Cate = {"ID","Cate Name"};
        // đặt tiêu đề cột cho tableModel
        tableModelCate.setColumnIdentifiers(colsName_Cate);
        tbCate.setModel(tableModelCate);
        ShowCateList();
        
        ///setting for tbDish
        String []colsName_Dish = {"ID","Dish Name","Price"};
        // đặt tiêu đề cột cho tableModel
        tableModelDish.setColumnIdentifiers(colsName_Dish);
        tbDish.setModel(tableModelDish);
        ShowDishList();
        
        ///setting for tbDetail
        String []colsName_Detail = {"Dish Name","Quantity", "Total"};
        // đặt tiêu đề cột cho tableModel
        tableModelDetail.setColumnIdentifiers(colsName_Detail);
        tbOrderDetail.setModel(tableModelDetail);
        
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(794, 612));
        setMinimumSize(new java.awt.Dimension(794, 612));
        setSize(new java.awt.Dimension(794, 612));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 762, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 542, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    ///show order uncomplte
    public void ShowUncompleteOrderData() throws SQLException{
        tableModel.getDataVector().removeAllElements();
        ResultSet result= main_order.UncompleteReceipt();
        try {
            while(result.next()){ // nếu còn đọc tiếp được một dòng dữ liệu
            String rows[] = new String[5];
            rows[0] = result.getString(1); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            tableModel.addRow(rows); // đưa dòng dữ liệu vào tableModel
            //mỗi lần có sự thay đổi dữ liệu ở tableModel thì Jtable sẽ tự động update
            }
        }
        catch (SQLException e) {
        }
    }
    
    ///đưa ra cái list các order detail được chọn cho bảng tbDetail
    public void ShowDetailList() throws SQLException
    {
        tableModelDetail.setRowCount(0);
        tableModelDetail.getDataVector().removeAllElements();
        ResultSet result= main_detail.ShowDetail(order_id);
        try {
            while(result.next()){ // nếu còn đọc tiếp được một dòng dữ liệu
            String rows[] = new String[5];
            rows[0] = result.getString(2);
            rows[1] = result.getString(3);
            rows[2] = result.getString(4);
            tableModelDetail.addRow(rows); // đưa dòng dữ liệu vào tableModel
            //mỗi lần có sự thay đổi dữ liệu ở tableModel thì Jtable sẽ tự động update
            }
            
        }
        catch (SQLException e) {
        }
    }
        
    ///show selected order lên các txt
    public void ShowOrderDetail(String orderid) throws SQLException
    {
        ResultSet rs= main_order.GetReceipt(orderid);//Goi ham lay du lieu theo ma loai
            if(rs.next())//Neu co du lieu
            {
                order_id = rs.getString("ReceiptID");
                total = rs.getLong("Total");
                customerID = rs.getInt("CustomerID");
                
                this.txtCustomerID.setText(String.valueOf(customerID));
                this.txtDateTime.setText(rs.getString("Date"));
                this.txtTotal.setText(String.valueOf(total));
                this.txtOrderID.setText(order_id);
            }
    }
    
    ///show dish of the selected cate tbDish 
    public void ShowDishFromCate() throws SQLException
    {
        tableModelDish.getDataVector().removeAllElements();
        ResultSet rs= main_dish.DishFromCate(cateID);
        try {
            while(rs.next()){ // nếu còn đọc tiếp được một dòng dữ liệu
            String rows[] = new String[4];
            rows[0] = rs.getString(1); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            rows[1] = rs.getString(2); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            rows[2] = rs.getString(3); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            tableModelDish.addRow(rows); // đưa dòng dữ liệu vào tableModelDish
            //mỗi lần có sự thay đổi dữ liệu ở tableModelDish thì Jtable sẽ tự động update
            }
        }
        catch (SQLException e) {
        }
    }
    
    ///show dish tbDish
    public void ShowDishList() throws SQLException
    {
        tableModelDish.getDataVector().removeAllElements();
        ResultSet rs= main_dish.Dish();
        try {
            while(rs.next()){ // nếu còn đọc tiếp được một dòng dữ liệu
            String rows[] = new String[4];
            rows[0] = rs.getString(1); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            rows[1] = rs.getString(2); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            rows[2] = rs.getString(3); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            tableModelDish.addRow(rows); // đưa dòng dữ liệu vào tableModelDish
            //mỗi lần có sự thay đổi dữ liệu ở tableModelDish thì Jtable sẽ tự động update
            }
        }
        catch (SQLException e) {
        }
    }
    
    ///show cate list tbCate
    public void ShowCateList() throws SQLException
    {
        ResultSet rs= main_cate.Category();
        try {
            while(rs.next()){ // nếu còn đọc tiếp được một dòng dữ liệu
            String rows[] = new String[2];
            rows[0] = rs.getString(1); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            rows[1] = rs.getString(2); // lấy dữ liệu tại cột số 1 (ứng với mã hàng)
            tableModelCate.addRow(rows); // đưa dòng dữ liệu vào tableModelDish
            //mỗi lần có sự thay đổi dữ liệu ở tableModelDish thì Jtable sẽ tự động update
            }
        }
        catch (SQLException e) {
        }
    }
    
    ///adđ dish into order detail
    public void AddDishToOrder(int d_id, int qua, long pri) throws SQLException
    {
                
        ///kiểm tra xem đã chọn order chưa
        if (order_id.equals(""))
        {
            JOptionPane.showMessageDialog(this, "PLEASE ADD OR CHOOSE AN ORDER");
        }
        else 
        {
            ///kiểm tra xem đã tồn tại chưa, nếu đã tồn tại thì cộng dồn
            for (int i = 0; i < tbOrderDetail.getRowCount(); i++) {
                if (Integer.parseInt(tbOrderDetail.getModel().getValueAt(i, 0).toString()) == d_id)
                {
                    int pre_quan = Integer.parseInt(tbOrderDetail.getModel().getValueAt(i, 1).toString());
                    int new_quan = pre_quan + qua;
                    main_detail.EditReceiptDetail(order_id,d_id,new_quan ,new_quan*pri );
                    return;
                }
            }
            
            ///nếu k thì add mới vào
            main_detail.InsertReceiptDetail(order_id,d_id, qua,qua*pri);
        }
    }
    
    public void UpdateTotal()
    {
        long sum = 0;
        for (int i = 0; i < tbOrderDetail.getRowCount(); i++) 
        {
            sum = sum + Long.parseLong(tbOrderDetail.getModel().getValueAt(i, 2).toString());
        }
        txtTotal.setText(String.valueOf(sum));
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmReport.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new frmReport().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(frmReport.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
